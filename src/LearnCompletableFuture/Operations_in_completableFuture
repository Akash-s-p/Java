
### ðŸ”¹ 1. Running Tasks Asynchronously

These are starting points:

* *runAsync(Runnable)* â†’ runs a task in the background but returns no result (void).
* *supplyAsync(Supplier<T>)* â†’ runs a task in the background and returns a result.

ðŸ‘‰ Example:

java
CompletableFuture<Void> f1 = CompletableFuture.runAsync(() -> {
    System.out.println("Task without result running...");
});

CompletableFuture<String> f2 = CompletableFuture.supplyAsync(() -> {
    return "Hello from async task!";
});


---

### ðŸ”¹ 2. Transforming Results (map-like)

* *thenApply(Function<T, U>)* â†’ transform the result into another value.
* *thenAccept(Consumer<T>)* â†’ consumes the result, doesnâ€™t return anything.
* *thenRun(Runnable)* â†’ ignores result and just runs another task.

ðŸ‘‰ Example:

java
CompletableFuture<String> f = CompletableFuture.supplyAsync(() -> "Akash")
    .thenApply(name -> "Hello " + name)   // transforms value
    .thenApply(msg -> msg + ", welcome!");

System.out.println(f.join()); // "Hello Akash, welcome!"


---

### ðŸ”¹ 3. Combining Multiple Futures

* *thenCombine(future, fn)* â†’ wait for both futures and combine their results.
* *thenCompose(fn)* â†’ chain one async task after another.
* *allOf(...)* â†’ wait for all futures to finish.
* *anyOf(...)* â†’ wait for any one future to finish.

ðŸ‘‰ Example (thenCombine):

java
CompletableFuture<Integer> f1 = CompletableFuture.supplyAsync(() -> 10);
CompletableFuture<Integer> f2 = CompletableFuture.supplyAsync(() -> 20);

CompletableFuture<Integer> sum = f1.thenCombine(f2, (a, b) -> a + b);
System.out.println(sum.join()); // 30


---

### ðŸ”¹ 4. Handling Errors

* *exceptionally(fn)* â†’ recover from errors by giving a fallback value.
* *handle(fn)* â†’ handle both success and failure in one place.

ðŸ‘‰ Example:

java
CompletableFuture<Integer> f = CompletableFuture.supplyAsync(() -> {
    if (true) throw new RuntimeException("Something failed");
    return 42;
}).exceptionally(ex -> {
    System.out.println("Error: " + ex.getMessage());
    return -1;
});

System.out.println(f.join()); // prints -1


---

### ðŸ”¹ 5. Waiting / Joining

* *join()* â†’ waits and returns result, throws unchecked exception if failed.
* *get()* â†’ same as join, but checked exceptions.
* *complete(value)* â†’ manually complete a future with value.
* *cancel()* â†’ cancel a future.

---

âœ… So to remember easily:

* *runAsync / supplyAsync* â†’ starting
* *thenApply / thenAccept / thenRun* â†’ transformations
* *thenCombine / thenCompose / allOf / anyOf* â†’ combining
* *exceptionally / handle* â†’ error handling
* *join / get* â†’ waiting